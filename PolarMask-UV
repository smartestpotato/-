import os
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms

from torch.utils.data import Dataset, DataLoader
from torchvision.transforms import ToTensor
from PIL import Image
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle
import cv2
import matplotlib.pyplot as plt
from torchvision.transforms import Resize, ToTensor
# 检查是否有可用的GPU
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(f'使用设备: {device}')

# 设置数据集文件夹路径
image_folder = "Buildingsample_pic"
mask_folder = "Buildingsample_binarymask"

# 创建PolarMask-UV模型
class PolarMaskUV(nn.Module):
    def __init__(self):
        super(PolarMaskUV, self).__init__()
        # 定义模型层
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.conv3 = nn.Conv2d(128, 256, kernel_size=3, padding=1)  # 新增的卷积层
        self.conv4 = nn.Conv2d(256, 256, kernel_size=3, padding=1)  # 新增的卷积层
        self.conv_final = nn.Conv2d(256, 1, kernel_size=1)

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = torch.relu(self.conv2(x))
        x = torch.relu(self.conv3(x))  # 新增的卷积层
        x = torch.relu(self.conv4(x))  # 新增的卷积层
        x = self.conv_final(x)
        return x

# 创建数据集类
class CustomDataset(Dataset):
    def __init__(self, image_folder, mask_folder, filenames, transform=None):
        self.image_folder = image_folder
        self.mask_folder = mask_folder
        self.filenames = filenames
        self.transform = transform

    def __len__(self):
        return len(self.filenames)

    def __getitem__(self, idx):
        image_path = os.path.join(self.image_folder, self.filenames[idx])
        mask_path = os.path.join(self.mask_folder, self.filenames[idx])
        image = Image.open(image_path).convert('RGB')
        mask = self.generate_polar_mask(mask_path)  # 生成极坐标遮罩
        if self.transform:
            image = self.transform(image)
            mask = self.transform(mask)
        return image, mask

    def generate_polar_mask(self, mask_path):
        # 从二值化遮罩生成极坐标遮罩的函数
        # 使用PolarMask-UV方法实现极坐标遮罩的生成
        # 示例使用OpenCV:
        binary_mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
        # 转换成浮点数
        binary_mask = binary_mask.astype(np.float32) / 255.0
        # 生成极坐标遮罩
        polar_mask = cv2.warpPolar(binary_mask, (binary_mask.shape[1], binary_mask.shape[0]), (binary_mask.shape[1]//2, binary_mask.shape[0]//2), binary_mask.shape[1]//2, cv2.WARP_POLAR_LINEAR)
        # 将极坐标遮罩转换成 PIL 图像
        polar_mask = (polar_mask * 255).astype(np.uint8)
        polar_mask = Image.fromarray(polar_mask)
        return polar_mask

# 划分训练集和测试集
image_filenames = [filename for filename in os.listdir(image_folder) if filename.endswith(".png")]
image_filenames = shuffle(image_filenames, random_state=42)  # 随机打乱数据
train_filenames, test_filenames = train_test_split(image_filenames, test_size=0.2, random_state=42)

transform = transforms.Compose([
        Resize((512, 512)),  # Resize images to (224, 224)
        ToTensor(),]  # Convert images to tensors
)

train_dataset = CustomDataset(image_folder, mask_folder, train_filenames, transform=transform)
test_dataset = CustomDataset(image_folder, mask_folder, test_filenames, transform=transform)

# 创建数据加载器
batch_size = 1
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=batch_size)

# 创建模型实例并移动到GPU（如果可用）
model = PolarMaskUV().to(device)

# 定义损失函数
criterion = nn.BCEWithLogitsLoss()  # 使用带有Logits的BCE损失函数

# 定义优化器
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 定义学习率衰减器
from torch.optim.lr_scheduler import ExponentialLR
scheduler = ExponentialLR(optimizer, gamma=0.95)  # 每个epoch学习率衰减为原来的0.95倍

# 训练模型
num_epochs = 20
train_losses = []
for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for images, masks in train_loader:
        images, masks = images.to(device), masks.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, masks)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    train_losses.append(running_loss / len(train_loader))
    print(f"第 {epoch+1}/{num_epochs} 轮, 损失: {train_losses[-1]:.4f}")
    scheduler.step()  # 每个epoch结束后进行学习率衰减

# 可视化训练过程中的损失值
plt.plot(range(1, num_epochs+1), train_losses, label='Training Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training Loss over Epochs')
plt.legend()
plt.show()

# 保存模型
torch.save(model.state_dict(), "building_detection_model_polar_mask_uv_3.pth")
